'use client'

import { useState } from 'react';
import Gradient from '@/components/ui/gradient';
import { useRouter } from 'next/navigation';
import { IngestForm } from '../preview-ingest/ingest-form';
import { IngestResult } from '../preview-ingest/ingest-result';
import ScrollOnMount from '../scroll-on-mount';
import { getIngestPreview, initiateDemo, saveDemo, useDemoNamespaces } from '../../lib/api-helper';
import { DemoNamespaces } from '../preview-ingest/demo-namespaces';
import { IngestPreviewQueryResult, InitiateDemoCommandResult } from '@/../@chat-connect-libs/contracts/dist';
import ChatBubbleIcon from './icon';
import ChatWindow from './chat-window';
import { ChatBubble } from './chat';
import { ExternalLink } from '@/components/external-link'


export type LoadingStatus = 'LOADING' | 'OK' | 'ERROR'

export interface IngestResultStatus {
    [pageName: string]: LoadingStatus
}


export function BubblePage() {
    const [nanoId, setNanoId] = useState<string | null>(null)
    const [demo, setDemo] = useState<InitiateDemoCommandResult | null>(null)
    const [errorMessage, setErrorMessage] = useState('');
    const [url, setUrl] = useState('');
    const [success, setSuccess] = useState(false);
    const [loading, setLoading] = useState(false);
    const [ingestResult, setIngestResult] = useState<IngestResultStatus>({})
    const [result, setResult] = useState<IngestPreviewQueryResult | null>(null)
    const demoNamespaces = useDemoNamespaces()
    const { push } = useRouter();

    const [isChatOpen, setIsChatOpen] = useState(false);

    const handleChatClick = () => {
        setIsChatOpen(!isChatOpen);
    };

    const updateIngestResult = (pageName: string, status: LoadingStatus) => {
        setIngestResult(prev => ({ ...prev, [pageName]: status }))
    }

    const ingest = async () => {
        if (!url) {
            setErrorMessage('Both url and namespace is required to proceed')
            return
        }
        setErrorMessage('')
        setLoading(true);

        try {
            const demo = await initiateDemo(url)
            setDemo(demo!)
            const newResult = await getIngestPreview(url, demo?.namespaceId!)
            setResult(newResult!)

            setIngestResult(newResult!.crawledPages.reduce<{ [pageName: string]: LoadingStatus }>((a, b) => {
                a[b.pageName] = 'LOADING'
                return a
            }, {}))

            await Promise.all(newResult!.crawledPages.map(async crawledPage => {
                const response = await fetch(`/chat-api/ingest?namespace=${encodeURIComponent(demo?.namespaceId!)}&url=${encodeURIComponent(crawledPage.originalUrl)}`, {
                    method: 'POST',
                    body: new Blob([crawledPage.html], { type: 'text/html' }),
                    headers: {
                        "Content-Type": "text/html"
                    }
                });
                if (response.ok) {
                    updateIngestResult(crawledPage.pageName, 'OK')
                } else {
                    updateIngestResult(crawledPage.pageName, 'ERROR')
                }
            }))
            await saveDemo(demo?.namespaceId!, newResult?.indexOpenGraph || null)
            setSuccess(true);
            setNanoId(crypto.randomUUID())
            setIsChatOpen(true);
        }
        catch (error) {
            setErrorMessage("Something went wrong... try again!")
            console.error('An error occurred during the HTML upload:', error);
        }
        setLoading(false)
    }

    const handleSubmit = async (event: any) => {
        event.preventDefault();
        if (success) {
            push(`/chat/${url}`)
        } else {
            await ingest()
        }
    };

    return <>
        <section className="container flex flex-col items-center z-10 overflow-hidden pb-16 md:pb-20 pt-24 lg:pt-[200px] lg:pb-28 max-w-[1280px]">
            <div className="flex flex-col lg:flex-row justify-center items-center lg:mb-24">
                <div className="max-w-[750px] text-center md:text-left">
                    <h1 className="text-4xl md:text-5xl font-bold mb-3"><span className="mr-2">游눫</span>Skr칛ddarsy din egna AI</h1>
                    <h2 className="text-1xl md:text-3xl mb-3">M칬jligg칬r smidiga konversationer f칬r dina kunder<span className="md:hidden">. L친t din webbplats g친 fr친n bra till fantastisk! </span></h2>
                    <h3 className="text-1xl hidden md:block">L친t din webbplats g친 fr친n bra till fantastisk med en unik Chattbot, drivet av den senaste AI-tekniken. Ge dina kunder den b칛sta m칬jliga upplevelsen med skr칛ddarsydda och naturliga konversationer direkt p친 din webbplats. V친r smarta Chattbot samlar automatiskt in information fr친n vilken webbsida som helst och svarar omedelbart p친 dina kunders fr친gor.</h3>
                </div>
                <div className="-mx-4 flex flex-wrap">
                    <div className="w-full px-4">
                        <div className="mx-auto max-w-[750px] rounded-md dark:bg-dark bg-opacity-5 px-6 mt-4 dark:bg-dark">
                            <IngestForm loading={loading} success={success} url={url} setUrl={setUrl} errorMessage={errorMessage} onSubmit={handleSubmit} />
                        </div>
                    </div>
                </div>
            </div>
            <div className="flex flex-col justify-center items-center h-[75px]">
                {loading ? <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary"></div> : null}
            </div>
            {!loading && !result ? <DemoNamespaces demoNamespaces={demoNamespaces.data} loading={demoNamespaces.loading} setNanoId={setNanoId} setDemo={setDemo} /> : null}
            {result ? <ScrollOnMount><IngestResult result={result} ingestResult={ingestResult} /></ScrollOnMount> : null}
            <ChatBubbleIcon onClick={handleChatClick} isChatOpen={isChatOpen}/>
            {isChatOpen ? (
                <ChatWindow isOpen={isChatOpen} onClose={handleChatClick}>
                    {nanoId ? (
                        <ScrollOnMount><ChatBubble
                            id={nanoId}
                            namespaceTitle={demo?.domainName}
                            namespaceId={demo?.namespaceId}
                            initialMessages={[]}
                        />
                        </ScrollOnMount>
                    ) : (
                        <div className="max-w-[750px] text-center md:text-left">
                            <h1 className="text-4xl md:text-3xl font-bold mb-3"><span className="mr-2">游댠</span>V칛lkommen!</h1>
                            <h2 className="text-1xl md:text-2xl mb-3">P친b칬rja din chat genom att v칛lja en sida att interagera med</h2>
                            <h3 className="text-1xl hidden md:block">Om du vill st친 ut fr친n m칛ngden och signalera din innovationsf칬rm친ga kan du enkelt integrera en skr칛ddarsydd chattbott till din egen sida. <ExternalLink href="/contact">Tryck h칛r f칬r att integrera din egen chattbott</ExternalLink> </h3>
                        </div>
                    )}
                </ChatWindow>
            ) : null}
            <Gradient />
        </section >
    </>
}
